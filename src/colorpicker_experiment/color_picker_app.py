import datetime
from madsci.common.types.workflow_types import WorkflowDefinition
from madsci.common.types.step_types import StepDefinition
from madsci.client.experiment_application import ExperimentApplication
from pathlib import Path
from utils import get_colors_from_file
import numpy as np
from string import ascii_uppercase
from bayes_solver import BayesColorSolver
from random import randint


class ColorPickerExperimentApplication(ExperimentApplication):
    """An example experiment application."""

    workflow_directory = Path("./workflows").resolve()
    protocol_directory = Path("./protocols").resolve()
    image_directory = Path("./images").resolve()
    experiment_design = Path("./experiment_design.yaml")
    url = "http://parker.cels.anl.gov:8002"
    wells = []
    for i in range(0, 9):
        for j in range(1, 13):
            wells.append(ascii_uppercase[i] + str(j))
    target_color = [randint(0, 255), randint(0, 255), randint(0, 255)]
    pop_size = 4
    solver = BayesColorSolver(pop_size, target_color)
    previous_ratios = None
    previous_colors = None
    well_volume = 275
    total_wells = []
    get_plate = True

    barty_fill_workflow = WorkflowDefinition(
        name="Reset Colors",
        description="Reset the ot2 color reservoirs using Barty",
        steps=[
            StepDefinition(
                name="Refill Colors",
                node="barty",
                action="fill_all",
                args={
                    "amount": 100,
                },
            )
        ],
    )
    barty_cleanup_workflow = WorkflowDefinition(
        name="Cleanup Colors",
        description="Cleanup the ot2 color reservoirs using Barty",
        steps=[
            StepDefinition(
                name="Drain Colors",
                node="barty",
                action="drain_all",
                args={
                    "amount": 100,
                },
            ),
        ],
    )

    def loop(self, iteration) -> None:
        """Run the experiment loop."""
        self.logger.info(f"Running iteration {iteration} of {self.experiment.run_name}")
        # If we need a new plate, get a new plate
        if self.get_plate:
            self.workcell_client.submit_workflow(
                self.workflow_directory / "get_plate.workflow.yaml"
            )
            self.get_plate = False
        # Get the input volumes for the ot2 to mix in the plate from the bayesian solver
        inputs = self.solver.run_iteration(self.previous_ratios, self.previous_colors)
        inputs = (np.array(inputs) * self.well_volume).round(3).tolist()

        # Track which wells in the plate to create samples in
        current_wells = self.wells[
            iteration * self.pop_size : (iteration + 1) * self.pop_size
        ]

        # Run the color mixing workflow
        workflow = self.workcell_client.submit_workflow(
            self.workflow_directory / "mix_colors.workflow.yaml",
            {
                "wells": current_wells,
                "amounts": inputs,
                "protocol_path": str(self.protocol_directory / "mix_colors.py"),
            },
        )

        self.total_wells = self.total_wells + current_wells
        # Retrieve the data generated by the workflow and save it as "image.jpg"
        self.data_client.save_datapoint_value(
            workflow.get_datapoint_id_by_label("image"),
            self.image_directory / "plate_image.jpg",
        )

        # Calculate all the colors on the plate and save the neccessary ones to submit to the solver
        colors = get_colors_from_file(self.image_directory / "plate_image.jpg")
        reference_colors = []
        for well in current_wells:
            reference_colors.append(colors[well])
        self.previous_colors = reference_colors

    def clean_up(self):
        self.workcell_client.submit_workflow(
            self.barty_cleanup_workflow, await_completion=False
        )
        self.workcell_client.submit_workflow(
            self.workflow_directory / "rinse_plate.workflow.yaml",
            {
                "wells": self.total_wells,
                "protocol_path": str(self.protocol_directory / "rinse_plate.py"),
            },
        )


if __name__ == "__main__":
    experiment_app = ColorPickerExperimentApplication()
    current_time = datetime.datetime.now()
    with experiment_app.manage_experiment(
        run_name=f"Color Picker Experiment Run {current_time}",
        run_description=f"Run for color picker experiment, started at ~{current_time}",
    ):
        experiment_app.logger.info(f"{experiment_app.target_color=}")
        experiment_app.logger.info(f"{experiment_app.pop_size=}")
        try:
            # Reset Colors using Barty
            experiment_app.workcell_client.submit_workflow(
                experiment_app.barty_fill_workflow, await_completion=False
            )
            for i in range(0, 1):
                experiment_app.loop(i)
        except Exception as e:
            experiment_app.workcell_client.submit_workflow(
                experiment_app.barty_cleanup_workflow, await_completion=False
            )
            raise e
        experiment_app.clean_up()
