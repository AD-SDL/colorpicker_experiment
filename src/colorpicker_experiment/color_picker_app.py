import datetime
from madsci.client.experiment_client import ExperimentClient
from madsci.client.data_client import DataClient
from madsci.client.experiment_application import ExperimentApplication, ExperimentDesign
from pathlib import Path
from utils import get_colors_from_file
import numpy as np
from string import ascii_uppercase
from bayes_solver import BayesColorSolver
class ColorPickerExperimentApplication(ExperimentApplication):
        """An example experiment application."""
        workflow_directory = Path("./workflows")
        experiment_design = ExperimentDesign(
            experiment_name="My Example Experiment",
            experiment_description="An example experimental design",
        )
        url = "http://parker.cels.anl.gov:8002"
        data_client = DataClient("http://parker.cels.anl.gov:8004")
        
        wells = []
        for i in range(0, 9):
            for j in range(1, 13):
                wells.append(ascii_uppercase[i] + str(j))   
        target_color = [252, 0, 252]    
        pop_size = 1   
        solver = BayesColorSolver(pop_size, target_color)
        previous_ratios = None
        previous_colors = None   
        well_volume = 275
        total_wells = [] 
        get_plate = True       
        def loop(self, iterations: int = 2) -> None:
            """Run the experiment loop."""
            for i in range(0, iterations):
                #If we need a new plate, get a new plate
                if self.get_plate:
                    self.workcell_client.submit_workflow(self.workflow_directory / "get_plate.workflow.yaml")            
                    self.get_plate = False
                #Get the input volumes for the ot2 to mix in the plate from the bayesian solver
                inputs = self.solver.run_iteration(self.previous_ratios, self.previous_colors)
                inputs = (np.array(inputs)*self.well_volume).round(3).tolist()

                #Track which wells in the plate to create samples in
                current_wells = self.wells[i*self.pop_size:(i+1)*self.pop_size]

                #Run the color mixing workflow
                workflow =self.workcell_client.submit_workflow(self.workflow_directory / "mix_colors.workflow.yaml", {"wells": current_wells, "amounts": inputs})
                
                self.total_wells = self.total_wells + current_wells
                #Retrieve the data generated by the workflow and save it as "image.jpg"
                self.data_client.save_datapoint_value(workflow.get_datapoint_id_by_label("image"), "image.jpg")
                
                #Calculate the all the colors on the plate and save the neccessary ones to submit to the solver
                colors = get_colors_from_file(Path("image.jpg"))
                reference_colors = []
                for well in current_wells:
                     reference_colors.append(colors[well])
                self.previous_colors = reference_colors
        def clean_up(self):
             self.workcell_client.submit_workflow(self.workflow_directory / "rinse_plate.workflow.yaml", {"wells": self.total_wells})
     
experiment_app = ColorPickerExperimentApplication()
current_time = datetime.datetime.now()
with experiment_app.manage_experiment(
        run_name=f"Color Picker Experiment Run {current_time}",
        run_description=f"Run for color picker experiment, started at ~{current_time}",
    ):
      experiment_app.loop(1)
      experiment_app.clean_up()